// import {
//     GetStaticPaths,
//     GetStaticProps,
//     GetStaticPropsContext,
//     InferGetStaticPropsType,
//   } from 'next';
//   import { useMDXComponent } from 'next-contentlayer/hooks';
//   import Utterances from '@/components/Utterances';
//   import { allPosts } from 'contentlayer/generated';
  
//   const Post = ({ post }: InferGetStaticPropsType<typeof getStaticProps>) => {
//     const MDXComponent = useMDXComponent(post.body.code);
//     return (
//       <>
//         <div className="mt-10 pb-10 border-b-2 mb-10 prose dark:prose-invert">
//           <h1 className="mb-16">{post.title}</h1>
//           <MDXComponent />
//         </div>
//         <Utterances />
//       </>
//     );
//   };
  
//   export const getStaticPaths: GetStaticPaths = async () => {
//     return {
//       paths: allPosts.map((p) => ({ params: { slug: p._raw.flattenedPath } })),
//       fallback: false,
//     };
//   };
  
//   export const getStaticProps: GetStaticProps = async ({ params }: GetStaticPropsContext) => {
//     const post = allPosts.find((p) => p._raw.flattenedPath === params?.slug);
//     return {
//       props: {
//         post,
//       },
//     };
//   };
  
//   export default Post;


//TODO : 아래부터 test
// import { format, parseISO } from 'date-fns'
// import { allPosts } from 'contentlayer/generated'
// import { getMDXComponent } from 'next-contentlayer/hooks'

// export const generateStaticParams = async () => allPosts.map((post) => ({ slug: post._raw.flattenedPath }))

// export const generateMetadata = ({ params }) => {
//   const post = allPosts.find((post) => post._raw.flattenedPath === params.slug)
//   return { title: post.title }
// }

// const PostLayout = ({ params }: { params: { slug: string } }) => {
//   const post = allPosts.find((post) => post._raw.flattenedPath === params.slug)

//   const Content = getMDXComponent(post.body.code)

//   return (
//     <article className="py-8 mx-auto max-w-xl">
//       <div className="mb-8 text-center">
//         <time dateTime={post.date} className="mb-1 text-xs text-gray-600">
//           {format(parseISO(post.date), 'LLLL d, yyyy')}
//         </time>
//         <h1>{post.title}</h1>
//       </div>
//       <Content />
//     </article>
//   )
// }

// export default PostLayout
